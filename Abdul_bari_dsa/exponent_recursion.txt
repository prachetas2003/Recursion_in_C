#include <stdio.h>

// Function to calculate m raised to the power of n (m^n) using recursion
int power(int m, int n)
{
    // Base case: if n is 0, then m^0 is 1
    if (n == 0) {
        return 1;
    }
    
    // Recursive case: m^n = m * m^(n-1)
    // Here we make a recursive call to calculate m raised to the power of (n-1),
    // and then multiply the result by m to get m^n.
    return power(m, n-1) * m;
}
// power(2,2) -> power(2,1)*2 -> power(2,0)*2 -> power(2,0) == 1
int main()
{
    // Calculate 2 raised to the power of 2 using the recursive power function
    int r = power(2, 2);
    printf("%d ", r);
    return 0;
}
